//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EIF.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AdminEntities : DbContext
    {
        public AdminEntities()
            : base("name=AdminEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Config_AgencyBranches> Config_AgencyBranches { get; set; }
        public virtual DbSet<Config_AgencyList> Config_AgencyList { get; set; }
        public virtual DbSet<Config_TeamList> Config_TeamList { get; set; }
        public virtual DbSet<Config_TeamMembers> Config_TeamMembers { get; set; }
        public virtual DbSet<Dom_AssignDomainToMembers> Dom_AssignDomainToMembers { get; set; }
        public virtual DbSet<Dom_DomainBasic> Dom_DomainBasic { get; set; }
        public virtual DbSet<Dom_DomainColumnsAlias> Dom_DomainColumnsAlias { get; set; }
        public virtual DbSet<Dom_DomainsDataExtra> Dom_DomainsDataExtra { get; set; }
        public virtual DbSet<Dom_DomainStatus> Dom_DomainStatus { get; set; }
        public virtual DbSet<Lup_BranchList> Lup_BranchList { get; set; }
        public virtual DbSet<Lup_Comments> Lup_Comments { get; set; }
        public virtual DbSet<Lup_MonthYear> Lup_MonthYear { get; set; }
        public virtual DbSet<Lup_TeamRole> Lup_TeamRole { get; set; }
        public virtual DbSet<PCR_ConnectionResult> PCR_ConnectionResult { get; set; }
        public virtual DbSet<PCR_ConnectionType> PCR_ConnectionType { get; set; }
        public virtual DbSet<PCR_PTPType> PCR_PTPType { get; set; }
        public virtual DbSet<Pre_Actions> Pre_Actions { get; set; }
        public virtual DbSet<Pre_BranchesPermissions> Pre_BranchesPermissions { get; set; }
        public virtual DbSet<Pre_Config> Pre_Config { get; set; }
        public virtual DbSet<Pre_FormActions> Pre_FormActions { get; set; }
        public virtual DbSet<Pre_FormList> Pre_FormList { get; set; }
        public virtual DbSet<Pre_GroupPermissions> Pre_GroupPermissions { get; set; }
        public virtual DbSet<Pre_Groups> Pre_Groups { get; set; }
        public virtual DbSet<Pre_GroupsMembers> Pre_GroupsMembers { get; set; }
        public virtual DbSet<Pre_ModuleForms> Pre_ModuleForms { get; set; }
        public virtual DbSet<Pre_Section> Pre_Section { get; set; }
        public virtual DbSet<Pre_SectionPermissions> Pre_SectionPermissions { get; set; }
        public virtual DbSet<Pre_SystemModules> Pre_SystemModules { get; set; }
        public virtual DbSet<Pre_Trans_Log> Pre_Trans_Log { get; set; }
        public virtual DbSet<Pre_Users> Pre_Users { get; set; }
        public virtual DbSet<Pre_UserStatus> Pre_UserStatus { get; set; }
        public virtual DbSet<Sch_Columns> Sch_Columns { get; set; }
        public virtual DbSet<Sch_SchemaColumns> Sch_SchemaColumns { get; set; }
        public virtual DbSet<Sch_Schemas> Sch_Schemas { get; set; }
        public virtual DbSet<Chrt_Contacts> Chrt_Contacts { get; set; }
        public virtual DbSet<Config_AgencyBranchList> Config_AgencyBranchList { get; set; }
        public virtual DbSet<Config_TeamMembersList> Config_TeamMembersList { get; set; }
        public virtual DbSet<Config_TeamMembersRoleList> Config_TeamMembersRoleList { get; set; }
        public virtual DbSet<DCR_DCRHistoryWithAccountsToImport> DCR_DCRHistoryWithAccountsToImport { get; set; }
        public virtual DbSet<DCR_MemberDCRSummary> DCR_MemberDCRSummary { get; set; }
        public virtual DbSet<DCR_SummaryForCharts> DCR_SummaryForCharts { get; set; }
        public virtual DbSet<Dom_DomainDetailsAllVersionsList> Dom_DomainDetailsAllVersionsList { get; set; }
        public virtual DbSet<Dom_DomainDetailsList> Dom_DomainDetailsList { get; set; }
        public virtual DbSet<Dom_DomainDetailsListPrev> Dom_DomainDetailsListPrev { get; set; }
        public virtual DbSet<Dom_DomainList> Dom_DomainList { get; set; }
        public virtual DbSet<Dom_MasterDomain> Dom_MasterDomain { get; set; }
        public virtual DbSet<Pre_BrunchesList> Pre_BrunchesList { get; set; }
        public virtual DbSet<Pre_SectionsList> Pre_SectionsList { get; set; }
        public virtual DbSet<Pre_UsersSections> Pre_UsersSections { get; set; }
        public virtual DbSet<Sch_SchemaColList> Sch_SchemaColList { get; set; }
        public virtual DbSet<Sch_SchemaList> Sch_SchemaList { get; set; }
        public virtual DbSet<PCR_PCRHistory> PCR_PCRHistory { get; set; }
        public virtual DbSet<PCR_PCRHistoryList> PCR_PCRHistoryList { get; set; }
        public virtual DbSet<PCR_Code2> PCR_Code2 { get; set; }
        public virtual DbSet<Dom_AccountsPayments> Dom_AccountsPayments { get; set; }
        public virtual DbSet<DomainType> DomainTypes { get; set; }
        public virtual DbSet<PCR_Reached> PCR_Reached { get; set; }
        public virtual DbSet<PCR_ReachedComments> PCR_ReachedComments { get; set; }
        public virtual DbSet<PCR_UnReachedComments> PCR_UnReachedComments { get; set; }
        public virtual DbSet<Adminpermission> Adminpermissions { get; set; }
        public virtual DbSet<AccessRight> AccessRights { get; set; }
        public virtual DbSet<AdminPermission_Functions> AdminPermission_Functions { get; set; }
        public virtual DbSet<ExceptionLog> ExceptionLogs { get; set; }
        public virtual DbSet<Design_MenuBasic> Design_MenuBasic { get; set; }
        public virtual DbSet<Design_MenuItems> Design_MenuItems { get; set; }
        public virtual DbSet<LicensedFunction> LicensedFunctions { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<Type> Types { get; set; }
        public virtual DbSet<Dom_AssignDomainToMembersList> Dom_AssignDomainToMembersList { get; set; }
        public virtual DbSet<Dom_DomainDetailsToBankAssignList> Dom_DomainDetailsToBankAssignList { get; set; }
        public virtual DbSet<Dom_DomainDetailsToInternalAssignList> Dom_DomainDetailsToInternalAssignList { get; set; }
        public virtual DbSet<Pre_UsersView> Pre_UsersView { get; set; }
        public virtual DbSet<UserDataScope> UserDataScopes { get; set; }
        public virtual DbSet<DomainsWithPayment> DomainsWithPayments { get; set; }
        public virtual DbSet<Config_MembersList> Config_MembersList { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<DCR_Column_Alias> DCR_Column_Alias { get; set; }
        public virtual DbSet<DCR_Domain_Data> DCR_Domain_Data { get; set; }
        public virtual DbSet<DCR_DomainList> DCR_DomainList { get; set; }
        public virtual DbSet<DCR_Schema> DCR_Schema { get; set; }
        public virtual DbSet<DCR_Schema_ColumnsList> DCR_Schema_ColumnsList { get; set; }
        public virtual DbSet<DCR_Schema_Details> DCR_Schema_Details { get; set; }
        public virtual DbSet<Domain_DomainType> Domain_DomainType { get; set; }
        public virtual DbSet<Domain_Product> Domain_Product { get; set; }
        public virtual DbSet<Domain_Region> Domain_Region { get; set; }
        public virtual DbSet<DCR_Schema_VIEW> DCR_Schema_VIEW { get; set; }
        public virtual DbSet<Domain_DataScope> Domain_DataScope { get; set; }
        public virtual DbSet<DomainsPerUserScope> DomainsPerUserScopes { get; set; }
        public virtual DbSet<PaymentDateVIEW> PaymentDateVIEWs { get; set; }
        public virtual DbSet<Pre_Offices> Pre_Offices { get; set; }
        public virtual DbSet<Pre_OfficesMembers> Pre_OfficesMembers { get; set; }
        public virtual DbSet<CollectorCode> CollectorCodes { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
    
        [DbFunction("AdminEntities", "SplitDelimiterString")]
        public virtual IQueryable<SplitDelimiterString_Result> SplitDelimiterString(string stringWithDelimiter, string delimiter)
        {
            var stringWithDelimiterParameter = stringWithDelimiter != null ?
                new ObjectParameter("StringWithDelimiter", stringWithDelimiter) :
                new ObjectParameter("StringWithDelimiter", typeof(string));
    
            var delimiterParameter = delimiter != null ?
                new ObjectParameter("Delimiter", delimiter) :
                new ObjectParameter("Delimiter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<SplitDelimiterString_Result>("[AdminEntities].[SplitDelimiterString](@StringWithDelimiter, @Delimiter)", stringWithDelimiterParameter, delimiterParameter);
        }
    
        public virtual int Pre_ChangePassword(Nullable<byte> userID, string password)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(byte));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pre_ChangePassword", userIDParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Pre_UserData_Result> Pre_UserData(Nullable<int> userID, string password)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pre_UserData_Result>("Pre_UserData", userIDParameter, passwordParameter);
        }
    
        public virtual int Pre_UserPasswordReset(Nullable<short> userID, string password)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(short));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Pre_UserPasswordReset", userIDParameter, passwordParameter);
        }
    
        public virtual int pre_UsersEdit(Nullable<short> iD, string displayName, string userName, Nullable<int> group, Nullable<System.DateTime> lADate, Nullable<int> lABy, string branchids, Nullable<int> office)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(short));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(int));
    
            var lADateParameter = lADate.HasValue ?
                new ObjectParameter("LADate", lADate) :
                new ObjectParameter("LADate", typeof(System.DateTime));
    
            var lAByParameter = lABy.HasValue ?
                new ObjectParameter("LABy", lABy) :
                new ObjectParameter("LABy", typeof(int));
    
            var branchidsParameter = branchids != null ?
                new ObjectParameter("branchids", branchids) :
                new ObjectParameter("branchids", typeof(string));
    
            var officeParameter = office.HasValue ?
                new ObjectParameter("Office", office) :
                new ObjectParameter("Office", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pre_UsersEdit", iDParameter, displayNameParameter, userNameParameter, groupParameter, lADateParameter, lAByParameter, branchidsParameter, officeParameter);
        }
    
        public virtual int pre_UsersInsert(string displayName, string userName, string password, byte[] image, Nullable<int> group, Nullable<bool> isActive, Nullable<System.DateTime> rCDate, Nullable<int> rCBy, string branchids, Nullable<int> office)
        {
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var imageParameter = image != null ?
                new ObjectParameter("Image", image) :
                new ObjectParameter("Image", typeof(byte[]));
    
            var groupParameter = group.HasValue ?
                new ObjectParameter("Group", group) :
                new ObjectParameter("Group", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var rCDateParameter = rCDate.HasValue ?
                new ObjectParameter("RCDate", rCDate) :
                new ObjectParameter("RCDate", typeof(System.DateTime));
    
            var rCByParameter = rCBy.HasValue ?
                new ObjectParameter("RCBy", rCBy) :
                new ObjectParameter("RCBy", typeof(int));
    
            var branchidsParameter = branchids != null ?
                new ObjectParameter("branchids", branchids) :
                new ObjectParameter("branchids", typeof(string));
    
            var officeParameter = office.HasValue ?
                new ObjectParameter("Office", office) :
                new ObjectParameter("Office", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("pre_UsersInsert", displayNameParameter, userNameParameter, passwordParameter, imageParameter, groupParameter, isActiveParameter, rCDateParameter, rCByParameter, branchidsParameter, officeParameter);
        }
    
        public virtual int Config_AgencyListInsert(string agencyTitle, string branchList, Nullable<bool> isActive)
        {
            var agencyTitleParameter = agencyTitle != null ?
                new ObjectParameter("AgencyTitle", agencyTitle) :
                new ObjectParameter("AgencyTitle", typeof(string));
    
            var branchListParameter = branchList != null ?
                new ObjectParameter("BranchList", branchList) :
                new ObjectParameter("BranchList", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Config_AgencyListInsert", agencyTitleParameter, branchListParameter, isActiveParameter);
        }
    
        public virtual int Config_AgencyListUpdate(Nullable<byte> iD, string agencyTitle, string branchList, Nullable<bool> isActive)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(byte));
    
            var agencyTitleParameter = agencyTitle != null ?
                new ObjectParameter("AgencyTitle", agencyTitle) :
                new ObjectParameter("AgencyTitle", typeof(string));
    
            var branchListParameter = branchList != null ?
                new ObjectParameter("BranchList", branchList) :
                new ObjectParameter("BranchList", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Config_AgencyListUpdate", iDParameter, agencyTitleParameter, branchListParameter, isActiveParameter);
        }
    
        public virtual int Config_TeamListInsert(Nullable<byte> branchID, Nullable<int> agencyID, string teamName, Nullable<bool> isActive)
        {
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(byte));
    
            var agencyIDParameter = agencyID.HasValue ?
                new ObjectParameter("AgencyID", agencyID) :
                new ObjectParameter("AgencyID", typeof(int));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Config_TeamListInsert", branchIDParameter, agencyIDParameter, teamNameParameter, isActiveParameter);
        }
    
        public virtual int Config_TeamListUpdate(Nullable<int> teamID, Nullable<byte> branchID, Nullable<int> agencyID, string teamName, Nullable<bool> isActive)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(byte));
    
            var agencyIDParameter = agencyID.HasValue ?
                new ObjectParameter("AgencyID", agencyID) :
                new ObjectParameter("AgencyID", typeof(int));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Config_TeamListUpdate", teamIDParameter, branchIDParameter, agencyIDParameter, teamNameParameter, isActiveParameter);
        }
    
        public virtual int Config_TeamMembersDelete(Nullable<int> teamID, Nullable<int> memberID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Config_TeamMembersDelete", teamIDParameter, memberIDParameter);
        }
    
        public virtual int Config_TeamMembersInsert(Nullable<int> teamID, Nullable<int> memberID, Nullable<int> roleID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Config_TeamMembersInsert", teamIDParameter, memberIDParameter, roleIDParameter);
        }
    
        public virtual int Sch_SchemaInsert(string schemaName, Nullable<byte> branchID)
        {
            var schemaNameParameter = schemaName != null ?
                new ObjectParameter("SchemaName", schemaName) :
                new ObjectParameter("SchemaName", typeof(string));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sch_SchemaInsert", schemaNameParameter, branchIDParameter);
        }
    
        public virtual int Sch_SchemaColomnsDelete(Nullable<byte> coID, Nullable<byte> schemaID)
        {
            var coIDParameter = coID.HasValue ?
                new ObjectParameter("CoID", coID) :
                new ObjectParameter("CoID", typeof(byte));
    
            var schemaIDParameter = schemaID.HasValue ?
                new ObjectParameter("SchemaID", schemaID) :
                new ObjectParameter("SchemaID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sch_SchemaColomnsDelete", coIDParameter, schemaIDParameter);
        }
    
        public virtual int Sch_SchemaColomnsInsert(Nullable<byte> coID, Nullable<byte> schemaID, Nullable<int> columnIndex)
        {
            var coIDParameter = coID.HasValue ?
                new ObjectParameter("CoID", coID) :
                new ObjectParameter("CoID", typeof(byte));
    
            var schemaIDParameter = schemaID.HasValue ?
                new ObjectParameter("SchemaID", schemaID) :
                new ObjectParameter("SchemaID", typeof(byte));
    
            var columnIndexParameter = columnIndex.HasValue ?
                new ObjectParameter("ColumnIndex", columnIndex) :
                new ObjectParameter("ColumnIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Sch_SchemaColomnsInsert", coIDParameter, schemaIDParameter, columnIndexParameter);
        }
    
        public virtual ObjectResult<Chrt_ContactsSP_Result> Chrt_ContactsSP(Nullable<int> agencyID, Nullable<int> branchID)
        {
            var agencyIDParameter = agencyID.HasValue ?
                new ObjectParameter("AgencyID", agencyID) :
                new ObjectParameter("AgencyID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Chrt_ContactsSP_Result>("Chrt_ContactsSP", agencyIDParameter, branchIDParameter);
        }
    
        public virtual ObjectResult<Chrt_PD_PTP_KeptAmmountSP_Result> Chrt_PD_PTP_KeptAmmountSP(Nullable<int> agencyID, Nullable<int> branchID)
        {
            var agencyIDParameter = agencyID.HasValue ?
                new ObjectParameter("AgencyID", agencyID) :
                new ObjectParameter("AgencyID", typeof(int));
    
            var branchIDParameter = branchID.HasValue ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Chrt_PD_PTP_KeptAmmountSP_Result>("Chrt_PD_PTP_KeptAmmountSP", agencyIDParameter, branchIDParameter);
        }
    
        [DbFunction("AdminEntities", "DCR_MemberDCRSummaryByAgencyFn")]
        public virtual IQueryable<DCR_MemberDCRSummaryByAgencyFn_Result> DCR_MemberDCRSummaryByAgencyFn(string agencyID)
        {
            var agencyIDParameter = agencyID != null ?
                new ObjectParameter("AgencyID", agencyID) :
                new ObjectParameter("AgencyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DCR_MemberDCRSummaryByAgencyFn_Result>("[AdminEntities].[DCR_MemberDCRSummaryByAgencyFn](@AgencyID)", agencyIDParameter);
        }
    
        public virtual int DCR_MemberDCRSummaryByAgencySP(string agencyID)
        {
            var agencyIDParameter = agencyID != null ?
                new ObjectParameter("AgencyID", agencyID) :
                new ObjectParameter("AgencyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByAgencySP", agencyIDParameter);
        }
    
        public virtual int DCR_MemberDCRSummaryByAgencyTotalSP(string agencyID)
        {
            var agencyIDParameter = agencyID != null ?
                new ObjectParameter("AgencyID", agencyID) :
                new ObjectParameter("AgencyID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByAgencyTotalSP", agencyIDParameter);
        }
    
        [DbFunction("AdminEntities", "DCR_MemberDCRSummaryByAllDomainBothTypeFn")]
        public virtual IQueryable<DCR_MemberDCRSummaryByAllDomainBothTypeFn_Result> DCR_MemberDCRSummaryByAllDomainBothTypeFn()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DCR_MemberDCRSummaryByAllDomainBothTypeFn_Result>("[AdminEntities].[DCR_MemberDCRSummaryByAllDomainBothTypeFn]()");
        }
    
        public virtual int DCR_MemberDCRSummaryByAllDomainBothTypeSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByAllDomainBothTypeSP");
        }
    
        public virtual int DCR_MemberDCRSummaryByAllDomainBothTypeTotalSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByAllDomainBothTypeTotalSP");
        }
    
        [DbFunction("AdminEntities", "DCR_MemberDCRSummaryByAllDomainFn")]
        public virtual IQueryable<DCR_MemberDCRSummaryByAllDomainFn_Result> DCR_MemberDCRSummaryByAllDomainFn(string domainType)
        {
            var domainTypeParameter = domainType != null ?
                new ObjectParameter("DomainType", domainType) :
                new ObjectParameter("DomainType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DCR_MemberDCRSummaryByAllDomainFn_Result>("[AdminEntities].[DCR_MemberDCRSummaryByAllDomainFn](@DomainType)", domainTypeParameter);
        }
    
        public virtual int DCR_MemberDCRSummaryByAllDomainSP(string domainType)
        {
            var domainTypeParameter = domainType != null ?
                new ObjectParameter("DomainType", domainType) :
                new ObjectParameter("DomainType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByAllDomainSP", domainTypeParameter);
        }
    
        public virtual int DCR_MemberDCRSummaryByAllDomainTotalSP(string domainType)
        {
            var domainTypeParameter = domainType != null ?
                new ObjectParameter("DomainType", domainType) :
                new ObjectParameter("DomainType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByAllDomainTotalSP", domainTypeParameter);
        }
    
        [DbFunction("AdminEntities", "DCR_MemberDCRSummaryByBranchFn")]
        public virtual IQueryable<DCR_MemberDCRSummaryByBranchFn_Result> DCR_MemberDCRSummaryByBranchFn(string branchID)
        {
            var branchIDParameter = branchID != null ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DCR_MemberDCRSummaryByBranchFn_Result>("[AdminEntities].[DCR_MemberDCRSummaryByBranchFn](@BranchID)", branchIDParameter);
        }
    
        public virtual int DCR_MemberDCRSummaryByBranchSP(string branchID)
        {
            var branchIDParameter = branchID != null ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByBranchSP", branchIDParameter);
        }
    
        public virtual int DCR_MemberDCRSummaryByBranchTotalSP(string branchID)
        {
            var branchIDParameter = branchID != null ?
                new ObjectParameter("BranchID", branchID) :
                new ObjectParameter("BranchID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByBranchTotalSP", branchIDParameter);
        }
    
        [DbFunction("AdminEntities", "DCR_MemberDCRSummaryByDomainFn")]
        public virtual IQueryable<DCR_MemberDCRSummaryByDomainFn_Result> DCR_MemberDCRSummaryByDomainFn(string domainID)
        {
            var domainIDParameter = domainID != null ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DCR_MemberDCRSummaryByDomainFn_Result>("[AdminEntities].[DCR_MemberDCRSummaryByDomainFn](@DomainID)", domainIDParameter);
        }
    
        [DbFunction("AdminEntities", "DCR_MemberDCRSummaryByOpenDomainBothTypesFn")]
        public virtual IQueryable<DCR_MemberDCRSummaryByOpenDomainBothTypesFn_Result> DCR_MemberDCRSummaryByOpenDomainBothTypesFn()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DCR_MemberDCRSummaryByOpenDomainBothTypesFn_Result>("[AdminEntities].[DCR_MemberDCRSummaryByOpenDomainBothTypesFn]()");
        }
    
        public virtual int DCR_MemberDCRSummaryByOpenDomainBothTypeSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByOpenDomainBothTypeSP");
        }
    
        public virtual int DCR_MemberDCRSummaryByOpenDomainBothTypeTotalSP()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByOpenDomainBothTypeTotalSP");
        }
    
        [DbFunction("AdminEntities", "DCR_MemberDCRSummaryByOpenDomainFn")]
        public virtual IQueryable<DCR_MemberDCRSummaryByOpenDomainFn_Result> DCR_MemberDCRSummaryByOpenDomainFn(string domainType)
        {
            var domainTypeParameter = domainType != null ?
                new ObjectParameter("DomainType", domainType) :
                new ObjectParameter("DomainType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DCR_MemberDCRSummaryByOpenDomainFn_Result>("[AdminEntities].[DCR_MemberDCRSummaryByOpenDomainFn](@DomainType)", domainTypeParameter);
        }
    
        public virtual int DCR_MemberDCRSummaryByOpenDomainSP(string domainType)
        {
            var domainTypeParameter = domainType != null ?
                new ObjectParameter("DomainType", domainType) :
                new ObjectParameter("DomainType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByOpenDomainSP", domainTypeParameter);
        }
    
        public virtual int DCR_MemberDCRSummaryByOpenDomainTotalSP(string domainType)
        {
            var domainTypeParameter = domainType != null ?
                new ObjectParameter("DomainType", domainType) :
                new ObjectParameter("DomainType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryByOpenDomainTotalSP", domainTypeParameter);
        }
    
        [DbFunction("AdminEntities", "DCR_MemberDCRSummaryFn")]
        public virtual IQueryable<DCR_MemberDCRSummaryFn_Result> DCR_MemberDCRSummaryFn()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<DCR_MemberDCRSummaryFn_Result>("[AdminEntities].[DCR_MemberDCRSummaryFn]()");
        }
    
        public virtual int DCR_MemberDCRSummarySP(string domainID)
        {
            var domainIDParameter = domainID != null ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummarySP", domainIDParameter);
        }
    
        public virtual int DCR_MemberDCRSummaryTotalSP(string domainID)
        {
            var domainIDParameter = domainID != null ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DCR_MemberDCRSummaryTotalSP", domainIDParameter);
        }
    
        public virtual int Dom_AssignDomainToMembersDelete(Nullable<long> accountID, Nullable<int> memberID)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_AssignDomainToMembersDelete", accountIDParameter, memberIDParameter);
        }
    
        public virtual int Dom_AssignDomainToMembersInsert(Nullable<long> accountID, Nullable<int> memberID, Nullable<short> roleID, Nullable<int> teamID, Nullable<bool> isBank)
        {
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(long));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(short));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var isBankParameter = isBank.HasValue ?
                new ObjectParameter("IsBank", isBank) :
                new ObjectParameter("IsBank", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_AssignDomainToMembersInsert", accountIDParameter, memberIDParameter, roleIDParameter, teamIDParameter, isBankParameter);
        }
    
        public virtual int Dom_Dom_AccountsPaymentsInsert(string domainId, string pKFieldVal, string pKAliasCol, Nullable<int> versionNumber, Nullable<decimal> paymentValue, string paymentdate, Nullable<int> type)
        {
            var domainIdParameter = domainId != null ?
                new ObjectParameter("DomainId", domainId) :
                new ObjectParameter("DomainId", typeof(string));
    
            var pKFieldValParameter = pKFieldVal != null ?
                new ObjectParameter("PKFieldVal", pKFieldVal) :
                new ObjectParameter("PKFieldVal", typeof(string));
    
            var pKAliasColParameter = pKAliasCol != null ?
                new ObjectParameter("PKAliasCol", pKAliasCol) :
                new ObjectParameter("PKAliasCol", typeof(string));
    
            var versionNumberParameter = versionNumber.HasValue ?
                new ObjectParameter("VersionNumber", versionNumber) :
                new ObjectParameter("VersionNumber", typeof(int));
    
            var paymentValueParameter = paymentValue.HasValue ?
                new ObjectParameter("PaymentValue", paymentValue) :
                new ObjectParameter("PaymentValue", typeof(decimal));
    
            var paymentdateParameter = paymentdate != null ?
                new ObjectParameter("paymentdate", paymentdate) :
                new ObjectParameter("paymentdate", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_Dom_AccountsPaymentsInsert", domainIdParameter, pKFieldValParameter, pKAliasColParameter, versionNumberParameter, paymentValueParameter, paymentdateParameter, typeParameter);
        }
    
        public virtual int Dom_DomainDelete(Nullable<long> domainID)
        {
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_DomainDelete", domainIDParameter);
        }
    
        public virtual int Dom_DomainDetailsAllVersionsListBy(string list, string recordSerial, string domainID)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var recordSerialParameter = recordSerial != null ?
                new ObjectParameter("RecordSerial", recordSerial) :
                new ObjectParameter("RecordSerial", typeof(string));
    
            var domainIDParameter = domainID != null ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_DomainDetailsAllVersionsListBy", listParameter, recordSerialParameter, domainIDParameter);
        }
    
        public virtual int Dom_GetDomainAssignDynamicColumnForExport(string list, Nullable<int> domainID, string versionNumber, Nullable<bool> type)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var versionNumberParameter = versionNumber != null ?
                new ObjectParameter("VersionNumber", versionNumber) :
                new ObjectParameter("VersionNumber", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDomainAssignDynamicColumnForExport", listParameter, domainIDParameter, versionNumberParameter, typeParameter);
        }
    
        public virtual int Dom_GetDomainDynamicColumnForExport(string list, Nullable<int> domainID, string versionNumber)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var versionNumberParameter = versionNumber != null ?
                new ObjectParameter("VersionNumber", versionNumber) :
                new ObjectParameter("VersionNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDomainDynamicColumnForExport", listParameter, domainIDParameter, versionNumberParameter);
        }
    
        public virtual int Dom_GetDynamicColumn(string list, Nullable<int> domainID, string product, string domainttype, string regions, Nullable<bool> myinfoonly, string cities)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var productParameter = product != null ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(string));
    
            var domainttypeParameter = domainttype != null ?
                new ObjectParameter("domainttype", domainttype) :
                new ObjectParameter("domainttype", typeof(string));
    
            var regionsParameter = regions != null ?
                new ObjectParameter("regions", regions) :
                new ObjectParameter("regions", typeof(string));
    
            var myinfoonlyParameter = myinfoonly.HasValue ?
                new ObjectParameter("myinfoonly", myinfoonly) :
                new ObjectParameter("myinfoonly", typeof(bool));
    
            var citiesParameter = cities != null ?
                new ObjectParameter("cities", cities) :
                new ObjectParameter("cities", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumn", listParameter, domainIDParameter, productParameter, domainttypeParameter, regionsParameter, myinfoonlyParameter, citiesParameter);
        }
    
        public virtual int Dom_GetDynamicColumnByFilter(string list, string col, string colVal, Nullable<int> domainID, Nullable<bool> type)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var colParameter = col != null ?
                new ObjectParameter("Col", col) :
                new ObjectParameter("Col", typeof(string));
    
            var colValParameter = colVal != null ?
                new ObjectParameter("ColVal", colVal) :
                new ObjectParameter("ColVal", typeof(string));
    
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnByFilter", listParameter, colParameter, colValParameter, domainIDParameter, typeParameter);
        }
    
        public virtual int Dom_GetDynamicColumnClearFilter(string list, Nullable<int> domainID, Nullable<bool> type, string product, string domainttype, string regions, Nullable<bool> myinfoonly)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(bool));
    
            var productParameter = product != null ?
                new ObjectParameter("product", product) :
                new ObjectParameter("product", typeof(string));
    
            var domainttypeParameter = domainttype != null ?
                new ObjectParameter("domainttype", domainttype) :
                new ObjectParameter("domainttype", typeof(string));
    
            var regionsParameter = regions != null ?
                new ObjectParameter("regions", regions) :
                new ObjectParameter("regions", typeof(string));
    
            var myinfoonlyParameter = myinfoonly.HasValue ?
                new ObjectParameter("myinfoonly", myinfoonly) :
                new ObjectParameter("myinfoonly", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnClearFilter", listParameter, domainIDParameter, typeParameter, productParameter, domainttypeParameter, regionsParameter, myinfoonlyParameter);
        }
    
        public virtual int Dom_GetDynamicColumnForExport(string list, Nullable<int> domainID, string versionNumber)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var versionNumberParameter = versionNumber != null ?
                new ObjectParameter("VersionNumber", versionNumber) :
                new ObjectParameter("VersionNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnForExport", listParameter, domainIDParameter, versionNumberParameter);
        }
    
        public virtual int Dom_GetDynamicColumnToBucketDiff(Nullable<int> domainID, string pK, string buckectCol, string pDCol, string balanceCol)
        {
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var pKParameter = pK != null ?
                new ObjectParameter("PK", pK) :
                new ObjectParameter("PK", typeof(string));
    
            var buckectColParameter = buckectCol != null ?
                new ObjectParameter("BuckectCol", buckectCol) :
                new ObjectParameter("BuckectCol", typeof(string));
    
            var pDColParameter = pDCol != null ?
                new ObjectParameter("PDCol", pDCol) :
                new ObjectParameter("PDCol", typeof(string));
    
            var balanceColParameter = balanceCol != null ?
                new ObjectParameter("BalanceCol", balanceCol) :
                new ObjectParameter("BalanceCol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnToBucketDiff", domainIDParameter, pKParameter, buckectColParameter, pDColParameter, balanceColParameter);
        }
    
        public virtual int Dom_GetDynamicColumnToCurrentBucket(Nullable<int> domainID, string buckectCol, string pDCol, string balanceCol)
        {
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var buckectColParameter = buckectCol != null ?
                new ObjectParameter("BuckectCol", buckectCol) :
                new ObjectParameter("BuckectCol", typeof(string));
    
            var pDColParameter = pDCol != null ?
                new ObjectParameter("PDCol", pDCol) :
                new ObjectParameter("PDCol", typeof(string));
    
            var balanceColParameter = balanceCol != null ?
                new ObjectParameter("BalanceCol", balanceCol) :
                new ObjectParameter("BalanceCol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnToCurrentBucket", domainIDParameter, buckectColParameter, pDColParameter, balanceColParameter);
        }
    
        public virtual int Dom_GetDynamicColumnToCurrentCycle(Nullable<int> domainID, string cycleCol, string pDCol, string balanceCol)
        {
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var cycleColParameter = cycleCol != null ?
                new ObjectParameter("CycleCol", cycleCol) :
                new ObjectParameter("CycleCol", typeof(string));
    
            var pDColParameter = pDCol != null ?
                new ObjectParameter("PDCol", pDCol) :
                new ObjectParameter("PDCol", typeof(string));
    
            var balanceColParameter = balanceCol != null ?
                new ObjectParameter("BalanceCol", balanceCol) :
                new ObjectParameter("BalanceCol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnToCurrentCycle", domainIDParameter, cycleColParameter, pDColParameter, balanceColParameter);
        }
    
        public virtual int Dom_GetDynamicColumnToCycleDiff(Nullable<int> domainID, string pK, string cycleCol, string pDCol, string balanceCol)
        {
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var pKParameter = pK != null ?
                new ObjectParameter("PK", pK) :
                new ObjectParameter("PK", typeof(string));
    
            var cycleColParameter = cycleCol != null ?
                new ObjectParameter("CycleCol", cycleCol) :
                new ObjectParameter("CycleCol", typeof(string));
    
            var pDColParameter = pDCol != null ?
                new ObjectParameter("PDCol", pDCol) :
                new ObjectParameter("PDCol", typeof(string));
    
            var balanceColParameter = balanceCol != null ?
                new ObjectParameter("BalanceCol", balanceCol) :
                new ObjectParameter("BalanceCol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnToCycleDiff", domainIDParameter, pKParameter, cycleColParameter, pDColParameter, balanceColParameter);
        }
    
        public virtual int Dom_GetDynamicColumnToNewRecoreds(string list, Nullable<int> domainID, string pK)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var pKParameter = pK != null ?
                new ObjectParameter("PK", pK) :
                new ObjectParameter("PK", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnToNewRecoreds", listParameter, domainIDParameter, pKParameter);
        }
    
        public virtual int Dom_GetDynamicColumnToPrevBucket(Nullable<int> domainID, string buckectCol, string pDCol, string balanceCol)
        {
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var buckectColParameter = buckectCol != null ?
                new ObjectParameter("BuckectCol", buckectCol) :
                new ObjectParameter("BuckectCol", typeof(string));
    
            var pDColParameter = pDCol != null ?
                new ObjectParameter("PDCol", pDCol) :
                new ObjectParameter("PDCol", typeof(string));
    
            var balanceColParameter = balanceCol != null ?
                new ObjectParameter("BalanceCol", balanceCol) :
                new ObjectParameter("BalanceCol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnToPrevBucket", domainIDParameter, buckectColParameter, pDColParameter, balanceColParameter);
        }
    
        public virtual int Dom_GetDynamicColumnToPrevCycle(Nullable<int> domainID, string cycleCol, string pDCol, string balanceCol)
        {
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var cycleColParameter = cycleCol != null ?
                new ObjectParameter("CycleCol", cycleCol) :
                new ObjectParameter("CycleCol", typeof(string));
    
            var pDColParameter = pDCol != null ?
                new ObjectParameter("PDCol", pDCol) :
                new ObjectParameter("PDCol", typeof(string));
    
            var balanceColParameter = balanceCol != null ?
                new ObjectParameter("BalanceCol", balanceCol) :
                new ObjectParameter("BalanceCol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnToPrevCycle", domainIDParameter, cycleColParameter, pDColParameter, balanceColParameter);
        }
    
        public virtual int Dom_GetDynamicColumnToRecoredsSummary(Nullable<int> domainID, string pK, string pDCol, string balanceCol)
        {
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var pKParameter = pK != null ?
                new ObjectParameter("PK", pK) :
                new ObjectParameter("PK", typeof(string));
    
            var pDColParameter = pDCol != null ?
                new ObjectParameter("PDCol", pDCol) :
                new ObjectParameter("PDCol", typeof(string));
    
            var balanceColParameter = balanceCol != null ?
                new ObjectParameter("BalanceCol", balanceCol) :
                new ObjectParameter("BalanceCol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnToRecoredsSummary", domainIDParameter, pKParameter, pDColParameter, balanceColParameter);
        }
    
        public virtual int Dom_GetDynamicColumnToRemovedRecoreds(string list, Nullable<int> domainID, string pK)
        {
            var listParameter = list != null ?
                new ObjectParameter("List", list) :
                new ObjectParameter("List", typeof(string));
    
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var pKParameter = pK != null ?
                new ObjectParameter("PK", pK) :
                new ObjectParameter("PK", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_GetDynamicColumnToRemovedRecoreds", listParameter, domainIDParameter, pKParameter);
        }
    
        public virtual int Dom_MasterDomainSP(string colName, string colVal)
        {
            var colNameParameter = colName != null ?
                new ObjectParameter("ColName", colName) :
                new ObjectParameter("ColName", typeof(string));
    
            var colValParameter = colVal != null ?
                new ObjectParameter("ColVal", colVal) :
                new ObjectParameter("ColVal", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_MasterDomainSP", colNameParameter, colValParameter);
        }
    
        public virtual int Dom_PrepearingBeforeUpdateDomain(Nullable<int> domainID)
        {
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dom_PrepearingBeforeUpdateDomain", domainIDParameter);
        }
    
        public virtual int Inseertnewpermission(Nullable<int> domaintypeid, Nullable<int> domaindataid, string portalaccessids)
        {
            var domaintypeidParameter = domaintypeid.HasValue ?
                new ObjectParameter("domaintypeid", domaintypeid) :
                new ObjectParameter("domaintypeid", typeof(int));
    
            var domaindataidParameter = domaindataid.HasValue ?
                new ObjectParameter("domaindataid", domaindataid) :
                new ObjectParameter("domaindataid", typeof(int));
    
            var portalaccessidsParameter = portalaccessids != null ?
                new ObjectParameter("portalaccessids", portalaccessids) :
                new ObjectParameter("portalaccessids", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inseertnewpermission", domaintypeidParameter, domaindataidParameter, portalaccessidsParameter);
        }
    
        public virtual int PCR_PCRHistoryInsert(Nullable<int> domainID, Nullable<int> memberID, Nullable<int> accountID, Nullable<int> connectionTypeID, Nullable<int> connectionResultID, string customerPhone, Nullable<System.DateTime> connectionDate, Nullable<int> pTPTypeID, Nullable<System.DateTime> pTPDate, Nullable<decimal> pTPAmount, Nullable<bool> isPromiseKept, Nullable<decimal> keptAmount, string engComment, string arabicComment, Nullable<System.DateTime> pTPDate2, Nullable<int> pTPTypeID2, Nullable<decimal> pTPAmount2, Nullable<int> pTPTypeID3, Nullable<System.DateTime> pTPDate3, Nullable<decimal> pTPAmount3, Nullable<System.DateTime> keptDate, Nullable<bool> isPromiseKept2, Nullable<System.DateTime> keptDate2, Nullable<decimal> keptAmount2, Nullable<bool> isPromiseKept3, Nullable<System.DateTime> keptDate3, Nullable<decimal> keptAmount3, Nullable<int> code2ID, Nullable<int> reachedID, Nullable<int> reachedCommentsID, Nullable<int> unReachedCommentsID)
        {
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var connectionTypeIDParameter = connectionTypeID.HasValue ?
                new ObjectParameter("ConnectionTypeID", connectionTypeID) :
                new ObjectParameter("ConnectionTypeID", typeof(int));
    
            var connectionResultIDParameter = connectionResultID.HasValue ?
                new ObjectParameter("ConnectionResultID", connectionResultID) :
                new ObjectParameter("ConnectionResultID", typeof(int));
    
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            var connectionDateParameter = connectionDate.HasValue ?
                new ObjectParameter("ConnectionDate", connectionDate) :
                new ObjectParameter("ConnectionDate", typeof(System.DateTime));
    
            var pTPTypeIDParameter = pTPTypeID.HasValue ?
                new ObjectParameter("PTPTypeID", pTPTypeID) :
                new ObjectParameter("PTPTypeID", typeof(int));
    
            var pTPDateParameter = pTPDate.HasValue ?
                new ObjectParameter("PTPDate", pTPDate) :
                new ObjectParameter("PTPDate", typeof(System.DateTime));
    
            var pTPAmountParameter = pTPAmount.HasValue ?
                new ObjectParameter("PTPAmount", pTPAmount) :
                new ObjectParameter("PTPAmount", typeof(decimal));
    
            var isPromiseKeptParameter = isPromiseKept.HasValue ?
                new ObjectParameter("IsPromiseKept", isPromiseKept) :
                new ObjectParameter("IsPromiseKept", typeof(bool));
    
            var keptAmountParameter = keptAmount.HasValue ?
                new ObjectParameter("KeptAmount", keptAmount) :
                new ObjectParameter("KeptAmount", typeof(decimal));
    
            var engCommentParameter = engComment != null ?
                new ObjectParameter("EngComment", engComment) :
                new ObjectParameter("EngComment", typeof(string));
    
            var arabicCommentParameter = arabicComment != null ?
                new ObjectParameter("ArabicComment", arabicComment) :
                new ObjectParameter("ArabicComment", typeof(string));
    
            var pTPDate2Parameter = pTPDate2.HasValue ?
                new ObjectParameter("PTPDate2", pTPDate2) :
                new ObjectParameter("PTPDate2", typeof(System.DateTime));
    
            var pTPTypeID2Parameter = pTPTypeID2.HasValue ?
                new ObjectParameter("PTPTypeID2", pTPTypeID2) :
                new ObjectParameter("PTPTypeID2", typeof(int));
    
            var pTPAmount2Parameter = pTPAmount2.HasValue ?
                new ObjectParameter("PTPAmount2", pTPAmount2) :
                new ObjectParameter("PTPAmount2", typeof(decimal));
    
            var pTPTypeID3Parameter = pTPTypeID3.HasValue ?
                new ObjectParameter("PTPTypeID3", pTPTypeID3) :
                new ObjectParameter("PTPTypeID3", typeof(int));
    
            var pTPDate3Parameter = pTPDate3.HasValue ?
                new ObjectParameter("PTPDate3", pTPDate3) :
                new ObjectParameter("PTPDate3", typeof(System.DateTime));
    
            var pTPAmount3Parameter = pTPAmount3.HasValue ?
                new ObjectParameter("PTPAmount3", pTPAmount3) :
                new ObjectParameter("PTPAmount3", typeof(decimal));
    
            var keptDateParameter = keptDate.HasValue ?
                new ObjectParameter("KeptDate", keptDate) :
                new ObjectParameter("KeptDate", typeof(System.DateTime));
    
            var isPromiseKept2Parameter = isPromiseKept2.HasValue ?
                new ObjectParameter("IsPromiseKept2", isPromiseKept2) :
                new ObjectParameter("IsPromiseKept2", typeof(bool));
    
            var keptDate2Parameter = keptDate2.HasValue ?
                new ObjectParameter("KeptDate2", keptDate2) :
                new ObjectParameter("KeptDate2", typeof(System.DateTime));
    
            var keptAmount2Parameter = keptAmount2.HasValue ?
                new ObjectParameter("KeptAmount2", keptAmount2) :
                new ObjectParameter("KeptAmount2", typeof(decimal));
    
            var isPromiseKept3Parameter = isPromiseKept3.HasValue ?
                new ObjectParameter("IsPromiseKept3", isPromiseKept3) :
                new ObjectParameter("IsPromiseKept3", typeof(bool));
    
            var keptDate3Parameter = keptDate3.HasValue ?
                new ObjectParameter("KeptDate3", keptDate3) :
                new ObjectParameter("KeptDate3", typeof(System.DateTime));
    
            var keptAmount3Parameter = keptAmount3.HasValue ?
                new ObjectParameter("KeptAmount3", keptAmount3) :
                new ObjectParameter("KeptAmount3", typeof(decimal));
    
            var code2IDParameter = code2ID.HasValue ?
                new ObjectParameter("Code2ID", code2ID) :
                new ObjectParameter("Code2ID", typeof(int));
    
            var reachedIDParameter = reachedID.HasValue ?
                new ObjectParameter("ReachedID", reachedID) :
                new ObjectParameter("ReachedID", typeof(int));
    
            var reachedCommentsIDParameter = reachedCommentsID.HasValue ?
                new ObjectParameter("ReachedCommentsID", reachedCommentsID) :
                new ObjectParameter("ReachedCommentsID", typeof(int));
    
            var unReachedCommentsIDParameter = unReachedCommentsID.HasValue ?
                new ObjectParameter("UnReachedCommentsID", unReachedCommentsID) :
                new ObjectParameter("UnReachedCommentsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PCR_PCRHistoryInsert", domainIDParameter, memberIDParameter, accountIDParameter, connectionTypeIDParameter, connectionResultIDParameter, customerPhoneParameter, connectionDateParameter, pTPTypeIDParameter, pTPDateParameter, pTPAmountParameter, isPromiseKeptParameter, keptAmountParameter, engCommentParameter, arabicCommentParameter, pTPDate2Parameter, pTPTypeID2Parameter, pTPAmount2Parameter, pTPTypeID3Parameter, pTPDate3Parameter, pTPAmount3Parameter, keptDateParameter, isPromiseKept2Parameter, keptDate2Parameter, keptAmount2Parameter, isPromiseKept3Parameter, keptDate3Parameter, keptAmount3Parameter, code2IDParameter, reachedIDParameter, reachedCommentsIDParameter, unReachedCommentsIDParameter);
        }
    
        public virtual int PCR_PCRHistoryUpdate(Nullable<int> dCRID, Nullable<int> domainID, Nullable<int> memberID, Nullable<int> accountID, Nullable<int> connectionTypeID, Nullable<int> connectionResultID, string customerPhone, Nullable<int> pTPTypeID, Nullable<System.DateTime> connectionDate, Nullable<System.DateTime> pTPDate, Nullable<decimal> pTPAmount, Nullable<bool> isPromiseKept, Nullable<decimal> keptAmount, string engComment, string arabicComment, Nullable<int> pTPTypeID2, Nullable<System.DateTime> pTPDate2, Nullable<decimal> pTPAmount2, Nullable<int> pTPTypeID3, Nullable<System.DateTime> pTPDate3, Nullable<decimal> pTPAmount3, Nullable<System.DateTime> keptDate, Nullable<bool> isPromiseKept2, Nullable<System.DateTime> keptDate2, Nullable<decimal> keptAmount2, Nullable<bool> isPromiseKept3, Nullable<System.DateTime> keptDate3, Nullable<decimal> keptAmount3, Nullable<int> code2ID, Nullable<int> reachedID, Nullable<int> reachedCommentsID, Nullable<int> unReachedCommentsID)
        {
            var dCRIDParameter = dCRID.HasValue ?
                new ObjectParameter("DCRID", dCRID) :
                new ObjectParameter("DCRID", typeof(int));
    
            var domainIDParameter = domainID.HasValue ?
                new ObjectParameter("DomainID", domainID) :
                new ObjectParameter("DomainID", typeof(int));
    
            var memberIDParameter = memberID.HasValue ?
                new ObjectParameter("MemberID", memberID) :
                new ObjectParameter("MemberID", typeof(int));
    
            var accountIDParameter = accountID.HasValue ?
                new ObjectParameter("AccountID", accountID) :
                new ObjectParameter("AccountID", typeof(int));
    
            var connectionTypeIDParameter = connectionTypeID.HasValue ?
                new ObjectParameter("ConnectionTypeID", connectionTypeID) :
                new ObjectParameter("ConnectionTypeID", typeof(int));
    
            var connectionResultIDParameter = connectionResultID.HasValue ?
                new ObjectParameter("ConnectionResultID", connectionResultID) :
                new ObjectParameter("ConnectionResultID", typeof(int));
    
            var customerPhoneParameter = customerPhone != null ?
                new ObjectParameter("CustomerPhone", customerPhone) :
                new ObjectParameter("CustomerPhone", typeof(string));
    
            var pTPTypeIDParameter = pTPTypeID.HasValue ?
                new ObjectParameter("PTPTypeID", pTPTypeID) :
                new ObjectParameter("PTPTypeID", typeof(int));
    
            var connectionDateParameter = connectionDate.HasValue ?
                new ObjectParameter("ConnectionDate", connectionDate) :
                new ObjectParameter("ConnectionDate", typeof(System.DateTime));
    
            var pTPDateParameter = pTPDate.HasValue ?
                new ObjectParameter("PTPDate", pTPDate) :
                new ObjectParameter("PTPDate", typeof(System.DateTime));
    
            var pTPAmountParameter = pTPAmount.HasValue ?
                new ObjectParameter("PTPAmount", pTPAmount) :
                new ObjectParameter("PTPAmount", typeof(decimal));
    
            var isPromiseKeptParameter = isPromiseKept.HasValue ?
                new ObjectParameter("IsPromiseKept", isPromiseKept) :
                new ObjectParameter("IsPromiseKept", typeof(bool));
    
            var keptAmountParameter = keptAmount.HasValue ?
                new ObjectParameter("KeptAmount", keptAmount) :
                new ObjectParameter("KeptAmount", typeof(decimal));
    
            var engCommentParameter = engComment != null ?
                new ObjectParameter("EngComment", engComment) :
                new ObjectParameter("EngComment", typeof(string));
    
            var arabicCommentParameter = arabicComment != null ?
                new ObjectParameter("ArabicComment", arabicComment) :
                new ObjectParameter("ArabicComment", typeof(string));
    
            var pTPTypeID2Parameter = pTPTypeID2.HasValue ?
                new ObjectParameter("PTPTypeID2", pTPTypeID2) :
                new ObjectParameter("PTPTypeID2", typeof(int));
    
            var pTPDate2Parameter = pTPDate2.HasValue ?
                new ObjectParameter("PTPDate2", pTPDate2) :
                new ObjectParameter("PTPDate2", typeof(System.DateTime));
    
            var pTPAmount2Parameter = pTPAmount2.HasValue ?
                new ObjectParameter("PTPAmount2", pTPAmount2) :
                new ObjectParameter("PTPAmount2", typeof(decimal));
    
            var pTPTypeID3Parameter = pTPTypeID3.HasValue ?
                new ObjectParameter("PTPTypeID3", pTPTypeID3) :
                new ObjectParameter("PTPTypeID3", typeof(int));
    
            var pTPDate3Parameter = pTPDate3.HasValue ?
                new ObjectParameter("PTPDate3", pTPDate3) :
                new ObjectParameter("PTPDate3", typeof(System.DateTime));
    
            var pTPAmount3Parameter = pTPAmount3.HasValue ?
                new ObjectParameter("PTPAmount3", pTPAmount3) :
                new ObjectParameter("PTPAmount3", typeof(decimal));
    
            var keptDateParameter = keptDate.HasValue ?
                new ObjectParameter("KeptDate", keptDate) :
                new ObjectParameter("KeptDate", typeof(System.DateTime));
    
            var isPromiseKept2Parameter = isPromiseKept2.HasValue ?
                new ObjectParameter("IsPromiseKept2", isPromiseKept2) :
                new ObjectParameter("IsPromiseKept2", typeof(bool));
    
            var keptDate2Parameter = keptDate2.HasValue ?
                new ObjectParameter("KeptDate2", keptDate2) :
                new ObjectParameter("KeptDate2", typeof(System.DateTime));
    
            var keptAmount2Parameter = keptAmount2.HasValue ?
                new ObjectParameter("KeptAmount2", keptAmount2) :
                new ObjectParameter("KeptAmount2", typeof(decimal));
    
            var isPromiseKept3Parameter = isPromiseKept3.HasValue ?
                new ObjectParameter("IsPromiseKept3", isPromiseKept3) :
                new ObjectParameter("IsPromiseKept3", typeof(bool));
    
            var keptDate3Parameter = keptDate3.HasValue ?
                new ObjectParameter("KeptDate3", keptDate3) :
                new ObjectParameter("KeptDate3", typeof(System.DateTime));
    
            var keptAmount3Parameter = keptAmount3.HasValue ?
                new ObjectParameter("KeptAmount3", keptAmount3) :
                new ObjectParameter("KeptAmount3", typeof(decimal));
    
            var code2IDParameter = code2ID.HasValue ?
                new ObjectParameter("Code2ID", code2ID) :
                new ObjectParameter("Code2ID", typeof(int));
    
            var reachedIDParameter = reachedID.HasValue ?
                new ObjectParameter("ReachedID", reachedID) :
                new ObjectParameter("ReachedID", typeof(int));
    
            var reachedCommentsIDParameter = reachedCommentsID.HasValue ?
                new ObjectParameter("ReachedCommentsID", reachedCommentsID) :
                new ObjectParameter("ReachedCommentsID", typeof(int));
    
            var unReachedCommentsIDParameter = unReachedCommentsID.HasValue ?
                new ObjectParameter("UnReachedCommentsID", unReachedCommentsID) :
                new ObjectParameter("UnReachedCommentsID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("PCR_PCRHistoryUpdate", dCRIDParameter, domainIDParameter, memberIDParameter, accountIDParameter, connectionTypeIDParameter, connectionResultIDParameter, customerPhoneParameter, pTPTypeIDParameter, connectionDateParameter, pTPDateParameter, pTPAmountParameter, isPromiseKeptParameter, keptAmountParameter, engCommentParameter, arabicCommentParameter, pTPTypeID2Parameter, pTPDate2Parameter, pTPAmount2Parameter, pTPTypeID3Parameter, pTPDate3Parameter, pTPAmount3Parameter, keptDateParameter, isPromiseKept2Parameter, keptDate2Parameter, keptAmount2Parameter, isPromiseKept3Parameter, keptDate3Parameter, keptAmount3Parameter, code2IDParameter, reachedIDParameter, reachedCommentsIDParameter, unReachedCommentsIDParameter);
        }
    
        public virtual int UpdateAdminpermission(Nullable<int> permissionid, Nullable<int> domaintypeid, Nullable<int> domaindataid, string portalaccessids)
        {
            var permissionidParameter = permissionid.HasValue ?
                new ObjectParameter("permissionid", permissionid) :
                new ObjectParameter("permissionid", typeof(int));
    
            var domaintypeidParameter = domaintypeid.HasValue ?
                new ObjectParameter("domaintypeid", domaintypeid) :
                new ObjectParameter("domaintypeid", typeof(int));
    
            var domaindataidParameter = domaindataid.HasValue ?
                new ObjectParameter("domaindataid", domaindataid) :
                new ObjectParameter("domaindataid", typeof(int));
    
            var portalaccessidsParameter = portalaccessids != null ?
                new ObjectParameter("portalaccessids", portalaccessids) :
                new ObjectParameter("portalaccessids", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAdminpermission", permissionidParameter, domaintypeidParameter, domaindataidParameter, portalaccessidsParameter);
        }
    
        public virtual int Deletepermission(Nullable<int> permissionid)
        {
            var permissionidParameter = permissionid.HasValue ?
                new ObjectParameter("permissionid", permissionid) :
                new ObjectParameter("permissionid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Deletepermission", permissionidParameter);
        }
    
        public virtual int DeleteExistPermissionFunction(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExistPermissionFunction", idParameter);
        }
    
        public virtual int InsertNewPermissionFunction(Nullable<int> permissionId, Nullable<int> functionID, string accessRightIds, Nullable<bool> myinfo)
        {
            var permissionIdParameter = permissionId.HasValue ?
                new ObjectParameter("permissionId", permissionId) :
                new ObjectParameter("permissionId", typeof(int));
    
            var functionIDParameter = functionID.HasValue ?
                new ObjectParameter("FunctionID", functionID) :
                new ObjectParameter("FunctionID", typeof(int));
    
            var accessRightIdsParameter = accessRightIds != null ?
                new ObjectParameter("AccessRightIds", accessRightIds) :
                new ObjectParameter("AccessRightIds", typeof(string));
    
            var myinfoParameter = myinfo.HasValue ?
                new ObjectParameter("Myinfo", myinfo) :
                new ObjectParameter("Myinfo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertNewPermissionFunction", permissionIdParameter, functionIDParameter, accessRightIdsParameter, myinfoParameter);
        }
    
        public virtual int UpdateExistPermissionFunction(Nullable<int> id, Nullable<int> permissionid, Nullable<int> functionId, string accessRightId, Nullable<bool> myinfo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var permissionidParameter = permissionid.HasValue ?
                new ObjectParameter("permissionid", permissionid) :
                new ObjectParameter("permissionid", typeof(int));
    
            var functionIdParameter = functionId.HasValue ?
                new ObjectParameter("FunctionId", functionId) :
                new ObjectParameter("FunctionId", typeof(int));
    
            var accessRightIdParameter = accessRightId != null ?
                new ObjectParameter("AccessRightId", accessRightId) :
                new ObjectParameter("AccessRightId", typeof(string));
    
            var myinfoParameter = myinfo.HasValue ?
                new ObjectParameter("myinfo", myinfo) :
                new ObjectParameter("myinfo", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateExistPermissionFunction", idParameter, permissionidParameter, functionIdParameter, accessRightIdParameter, myinfoParameter);
        }
    
        public virtual int InsertintoLogs(string message, Nullable<System.DateTime> date)
        {
            var messageParameter = message != null ?
                new ObjectParameter("message", message) :
                new ObjectParameter("message", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertintoLogs", messageParameter, dateParameter);
        }
    
        public virtual int DeleteExistProduct(Nullable<int> prodid)
        {
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("prodid", prodid) :
                new ObjectParameter("prodid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteExistProduct", prodidParameter);
        }
    
        public virtual int InsertProduct(string productname)
        {
            var productnameParameter = productname != null ?
                new ObjectParameter("productname", productname) :
                new ObjectParameter("productname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertProduct", productnameParameter);
        }
    
        public virtual int UpadateExistProduct(Nullable<int> prodid, string prodname)
        {
            var prodidParameter = prodid.HasValue ?
                new ObjectParameter("prodid", prodid) :
                new ObjectParameter("prodid", typeof(int));
    
            var prodnameParameter = prodname != null ?
                new ObjectParameter("prodname", prodname) :
                new ObjectParameter("prodname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpadateExistProduct", prodidParameter, prodnameParameter);
        }
    
        public virtual int UserDataScopeEdit(Nullable<int> iD, Nullable<int> bankID, Nullable<int> productID, Nullable<int> typeID, string regionIDS, string cityIDS)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var regionIDSParameter = regionIDS != null ?
                new ObjectParameter("RegionIDS", regionIDS) :
                new ObjectParameter("RegionIDS", typeof(string));
    
            var cityIDSParameter = cityIDS != null ?
                new ObjectParameter("CityIDS", cityIDS) :
                new ObjectParameter("CityIDS", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDataScopeEdit", iDParameter, bankIDParameter, productIDParameter, typeIDParameter, regionIDSParameter, cityIDSParameter);
        }
    
        public virtual int UserDataScopeInsert(Nullable<int> bankID, Nullable<int> productID, Nullable<int> typeID, string regionIDS, string cityIDs, Nullable<int> userId)
        {
            var bankIDParameter = bankID.HasValue ?
                new ObjectParameter("BankID", bankID) :
                new ObjectParameter("BankID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var regionIDSParameter = regionIDS != null ?
                new ObjectParameter("RegionIDS", regionIDS) :
                new ObjectParameter("RegionIDS", typeof(string));
    
            var cityIDsParameter = cityIDs != null ?
                new ObjectParameter("CityIDs", cityIDs) :
                new ObjectParameter("CityIDs", typeof(string));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDataScopeInsert", bankIDParameter, productIDParameter, typeIDParameter, regionIDSParameter, cityIDsParameter, userIdParameter);
        }
    
        public virtual int UserDataDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDataDelete", iDParameter);
        }
    
        public virtual int UserDataScopeDelete(Nullable<int> iD)
        {
            var iDParameter = iD.HasValue ?
                new ObjectParameter("ID", iD) :
                new ObjectParameter("ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserDataScopeDelete", iDParameter);
        }
    
        public virtual int DeleteEmployee(string code)
        {
            var codeParameter = code != null ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", codeParameter);
        }
    }
}
